Bootstrap: docker
From: nvidia/cuda-ppc64le:10.1-runtime

%labels
        maintainer "Norman Koch <norman.koch@tu-dresden.de>"
        com.nvidia.volumes.needed="nvidia_driver"

%environment
        export DEBIAN_FRONTEND=noninteractive
        export DS_NOTENSORFLOW=1
        export DS_NODECODER=1
        export MODULEPATH=/sw/installed/
        export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
        export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
        export LANG=en_US.UTF-8
        export LC_ALL=en_US.UTF-8

        export MODULEPATH_ROOT=/sw/
        export MODULEPATH="/sw/modules/ml/classic:/sw/modules/ml/vis:/sw/modules/ml/tools:/sw/modules/ml/toolchain:/sw/modules/ml/system:/sw/modules/ml/phys:/sw/modules/ml/perf:/sw/modules/ml/numlib:/sw/modules/ml/mpi:/sw/modules/ml/math:/sw/modules/ml/lib:/sw/modules/ml/lang:/sw/modules/ml/geo:/sw/modules/ml/devel:/sw/modules/ml/debugger:/sw/modules/ml/data:/sw/modules/ml/compiler:/sw/modules/ml/chem:/sw/modules/ml/cae:/sw/modules/ml/bio:/sw/modules/ml/base:/sw/modules/taurus/environment"

        export NVIDIA_DRIVER_CAPABILITIES=compute,utility
        export NVIDIA_VISIBLE_DEVICES=all
        export NCCL_VERSION=2.3.5
        export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
        export CUDNN=7.6.2.24-1
        export CUDA_VERSION=10.0.130
        export CUDA_PKG_VERSION=10-0=10.0.130-1

	export HOSTIP=$(ip addr | grep 192 | sed -e 's/.*inet //' | sed -e 's/\/.*//')
	echo ${HOSTIP}
        export PYTHONPATH=/ds/training/:$PYTHONPATH

%runscript
        echoblue "Installing and mounting sshfs"
                echored "Enter password when asked for it"
                        sshfs -o StrictHostKeyChecking=no root@$HOSTIP:/host_data/software /software
                        sshfs -o StrictHostKeyChecking=no root@$HOSTIP:/host_data/sw /sw

        echoblue "Loading ml-stuff"
                . /usr/local/lmod/lmod/init/profile

                systemBaseMPATH="/sw/modules/taurus/environment"
                ml use /sw/modules/taurus/environment

                echogreen "Module Table"
                        for i in $(seq -f "%03g" $_ModuleTable_Sz_); do eval "echo \$_ModuleTable${i}_"; done | base64 --decode

                module av
                ml --force unload modenv/scs5
                ml modenv/ml
                ml TensorFlow/1.15.0-fosscuda-2019b-Python-3.7.4

%help
	Singularity-Package for installing DeepSpeech on ML

	-- Run in a VM on Taurus
	----> startInVM --arch=power9 --time="08:00:00"
	-- run passwd and set the root password to 'test' before running it
	-- make sure 'mount_host_data' was run in the VM

%post
        echo :"
Singularity-Package for installing DeepSpeech on ML

-- Run in a VM on Taurus
----> startInVM --arch=power9 --time="08:00:00"
-- run passwd and set the root password to 'test' before running it
-- make sure 'mount_host_data' was run in the VM
        "

        export BASEURL=https://raw.githubusercontent.com/NormanTUD/DeepspeechSingularityPowerPC/master/

        apt-get update
        apt-get install -y wget apt-utils iproute2 coreutils libc6 libc6-dev

        wget --no-check-certificate $BASEURL/echoc.sh
        sh echoc.sh

        echoblue "Setting limits"
                ulimit -Hn
                ulimit -n 16384
                ulimit -Hn

        echoblue "Setting variables"
                export DEBIAN_FRONTEND=noninteractive
                export DS_NOTENSORFLOW=1
                export DS_NODECODER=1
                export MODULEPATH=/sw/installed/
                export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
                export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
                export LANG=en_US.UTF-8
                export LC_ALL=en_US.UTF-8

                export MODULEPATH_ROOT=/sw/
                export MODULEPATH="/sw/modules/ml/classic:/sw/modules/ml/vis:/sw/modules/ml/tools:/sw/modules/ml/toolchain:/sw/modules/ml/system:/sw/modules/ml/phys:/sw/modules/ml/perf:/sw/modules/ml/numlib:/sw/modules/ml/mpi:/sw/modules/ml/math:/sw/modules/ml/lib:/sw/modules/ml/lang:/sw/modules/ml/geo:/sw/modules/ml/devel:/sw/modules/ml/debugger:/sw/modules/ml/data:/sw/modules/ml/compiler:/sw/modules/ml/chem:/sw/modules/ml/cae:/sw/modules/ml/bio:/sw/modules/ml/base:/sw/modules/taurus/environment"

                export NVIDIA_DRIVER_CAPABILITIES=compute,utility
                export NVIDIA_VISIBLE_DEVICES=all
                export NCCL_VERSION=2.3.5
                export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
                export CUDNN=7.6.2.24-1
                export CUDA_VERSION=10.0.130
                export CUDA_PKG_VERSION=10-0=10.0.130-1

		export HOSTIP=$(ip addr | grep 192 | sed -e 's/.*inet //' | sed -e 's/\/.*//')
		echo ${HOSTIP}
                export PYTHONPATH=/ds/training/:$PYTHONPATH

        echoblue "Creating folders that sshfs can mount into"
                mkdir /scratch
                mkdir /sw
                mkdir /software

        echoblue "Creating folders"
                mkdir /lmodsrcdir
                mkdir /webrtcvad
                mkdir /llvm
                mkdir /llvm/build
                mkdir /setuptools
                mkdir /stt
                mkdir /ds

        echoblue "Installing and mounting sshfs"
                apt-get -y install sshfs
                echo "test" | sshfs -o password_stdin -o StrictHostKeyChecking=no root@$HOSTIP:/host_data/software /software
                echo "test" | sshfs -o password_stdin -o StrictHostKeyChecking=no root@$HOSTIP:/host_data/sw /sw

        echoblue "Writing NVIDIA-files"
                echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
                echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

        echoblue "Installing stuff via apt-get"
                apt-get -y install\
                        alembic\
                        apt\
                        apt-transport-https\
                        apt-utils\
                        build-essential\
                        ca-certificates\
                        clang\
                        cmake\
                        curl\
                        cython\
                        environment-modules\
                        fakeroot\
                        g++\
                        gcc\
                        gdebi\
                        gfortran\
                        git\
                        git-lfs\
                        ibverbs-providers\
                        less\
                        libasound2\
                        libboost-all-dev\
                        libcudnn7\
                        libcurl4-openssl-dev\
                        libegl1-mesa\
                        libffi-dev\
                        libglu1-mesa-dev\
                        libhdf5-dev\
                        libibverbs1\
                        libibverbs-dev\
                        liblapack-dev\
                        liblua5.1-0\
                        liblua5.1-0-dev\
                        libnss3\
                        libobjc4\
                        libobjc-5-dev\
			python3-pip\
                        libopenblas-dev\
                        libsox-fmt-mp3\
                        libssl1.0.0\
                        libssl-dev\
                        libxml2-dev\
                        libxslt1-dev\
                        libyaml-dev\
                        locales\
                        lua5.1\
                        lua-filesystem\
                        lua-posix\
                        luarocks\
                        make\
                        nvidia-opencl-dev\
                        ocl-icd-libopencl1\
                        ocl-icd-opencl-dev\
                        opencl-headers\
                        sed\
                        software-properties-common\
                        sox\
                        sudo\
                        swig\
                        tar\
                        tcl8.6-dev\
                        tclsh\
                        tzdata\
                        uuid-dev\
                        vim\
                        wget\
                        zsh

        echoblue "Installing Lmod"
                luarocks install luaposix

                cd /lmodsrcdir
                git clone https://github.com/TACC/Lmod.git .
                ./configure --with-fastTCLInterp=no
                make install

                apt-get update

                apt-get -y install lmod

	echoblue "Loading modules"
		. /usr/local/lmod/lmod/init/profile

		systemBaseMPATH="/sw/modules/taurus/environment"
		ml use /sw/modules/taurus/environment

		#echogreen "Module Table"
		#    for i in $(seq -f "%03g" $_ModuleTable_Sz_); do eval "echo \$_ModuleTable${i}_"; done | base64 --decode
		#    echo ""

		module av
		ml --force unload modenv/scs5
		ml modenv/ml
		ml TensorFlow/1.15.0-fosscuda-2019b-Python-3.7.4

        echoblue "Making sure libhdf5 is accessible"
                cp /usr/lib/powerpc64le-linux-gnu/hdf5/serial/libhdf5.so /usr/local/lib

        echoblue "Installing python-packages via pip"
                #python3 -m pip install --upgrade pip setuptools

                pip3 install Cython

                #pip3 install --upgrade\
                #        pip==20.0.2\
                #        wheel==0.34.2\

                #/usr/bin/python3 -m pip install --upgrade pip

                pip3 install progressbar

        echoblue "Installing webrtcvad"
                cd /webrtcvad
                wget --no-check-certificate $BASEURL/webrtcvad-2.0.10-ppc.tar.gz
                pip3 install webrtcvad-2.0.10-ppc.tar.gz

        echoblue "Compiling and installing llvm"
                cd /llvm/
		export LLVM_VERSION=10.0.0
                wget --no-check-certificate https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz -O /llvm/llvm-${LLVM_VERSION}.src.tar.xz
                tar xf llvm-${LLVM_VERSION}.src.tar.xz
                cd build
                cmake /llvm/llvm-${LLVM_VERSION}.src
                sed -i "s/CMAKE_BUILD_TYPE:STRING=Debug/CMAKE_BUILD_TYPE:STRING=Release/" CMakeCache.txt
                cmake --build .
                cmake --build . --target install

        echoblue "Setting timezone to New York"
                ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
                dpkg-reconfigure --frontend noninteractive tzdata

        echoblue "Installing git lfs"
                curl -s ${BASEURL}git-lfs.sh | bash
                apt-get -y install git-lfs
                ln -s cuda-${CUDA_PKG_VERSION} /usr/local/cuda

        echoblue "Setting locales"
                locale-gen en_US.UTF-8
                locale-gen en_US en_US.UTF-8
                dpkg-reconfigure locales

        echoblue "Installing more stuff via pip that was previously not able to install"
                pip3 install --upgrade\
                        pip==20.0.2\
                        wheel==0.34.2\
                        llvmlite

                pip3 install\
                        absl-py==0.9.0\
                        argparse attrdict==2.0.1\
                        bs4\
                        futures==3.1.1\
                        json-e==2.3.1\
                        librosa networkx==2.2\
                        optuna opuslib==2.0.0\
                        pandas\
                        progressbar2==3.47.0\
                        python-utils==2.3.0\
                        pyxdg\
                        pyyaml==5.1.1\
                        requests==2.22.0\
                        semver\
                        six==1.13.0\
                        slugid==1.0.7\
                        soundfile\
                        sox\
                        virtualenv\
                        setuptools\
                        numpy\
                        scipy

	echoblue "Installing setuptools"
                cd /setuptools/
                wget --no-check-certificate $BASEURL/setuptools.zip
                unzip setuptools.zip
                python3 bootstrap.py
                python3 setup.py install

        echoblue "Cleaning apt-get resources"
                apt-get clean

	echoblue "Downloading and installing STT"
                cd /stt/
                wget --no-check-certificate $BASEURL/stt.zip
                unzip stt.zip
                rm stt.zip
                echogreen "Changing stt-stuff with sed"
                sed -i 's/ + tensorflow_pypi_dep//' setup.py
                sed -i 's/ + decoder_pypi_dep//' setup.py
                sed -i 's/ + llvmlite//' setup.py

		echored "NEW SEDs"
			sed --in-place '/numba/d' setup.py
			sed --in-place '/llvmlite/d' setup.py

                pip3 install --upgrade -e /stt/

        echoblue "Downloading DS"
                git clone --depth 1 https://github.com/mozilla/DeepSpeech /ds/

#        echoblue "Installing ctcdecode"
#                cd /ds/native_client/
#                rm definitions.mk
#                wget --no-check-certificate $BASEURL/definitions.mk
#                cd ctcdecode
#                CXX=g++-7 make all
#
#                #echogreen "Fixing pip"
#                #        sed -i 's/if install_req.link/if 0 and install_req.link/' /usr/lib/python3/dist-packages/pip/req/req_set.py
#                cd /ds/native_client/ctcdecode
#                make bindings NUM_PROCESSES=8
#                pip3 install dist/*.whl
#
#                pip3 install --upgrade -e .
#
#        echoblue "Installing DS"
#                wget --no-check-certificate $BASEURL/requirements.txt -O /ds/requirements.txt
#                sed -i 's/pandas==0.25.3/pandas/' /ds/requirements_eval_tflite.txt
#                sed --in-place '/deepspeech/d' /ds/requirements_eval_tflite.txt
#                sed --in-place '/mozilla_voice_stt_tflite/d' /ds/requirements_eval_tflite.txt
#                for i in $(cat /ds/requirements_eval_tflite.txt); do
#                        echo '======= $i ==========>';
#                        pip3 install $i || true
#                done
#                pip3 install -r /ds/requirements_tests.txt
#                pip3 install -r /ds/requirements_transcribe.txt
#
#                sed -i 's/1.15.2/1.15.0/' setup.py
#                pip3 install --upgrade --force-reinstall --ignore-installed -e .
#
#                pip3 install absl-py
#
#	echoblue "Loading lmod and modules"
#                . /usr/local/lmod/lmod/init/profile
#
#                systemBaseMPATH="/sw/modules/taurus/environment"
#                ml use /sw/modules/taurus/environment
#
#                #echogreen "Module Table"
#                #        for i in $(seq -f "%03g" $_ModuleTable_Sz_); do eval "echo \$_ModuleTable${i}_"; done | base64 --decode
#
#                module av
#                ml --force unload modenv/scs5
#                ml modenv/ml
#                ml TensorFlow/1.15.0-fosscuda-2019b-Python-3.7.4
